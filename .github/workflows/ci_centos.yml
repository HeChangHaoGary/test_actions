name: test_container

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    # get docker contatiner
    container: 
      image: garyhhh/dingo-centos:latest
      # mount
      # workingdirectory: "/home/runner/work/test_actions"

      volumes:
      -  /home/runner/work/test_actions/test_actions:/home/runner/work/test_actions/test_actions

    steps:
    - uses: actions/checkout@v3


    - name: test path
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: ls -l && pwd && cd /home/runner/work/test_actions/test_actions && ls -l && echo $GITHUB_ACTION_REPOSITORY


    # - name: Configure CMake
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   run: cd /home/dingo-poc && cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    # - name: Build
    #   # Build your program with the given configuration
    #   run: cd /home/dingo-poc && cmake --build ./build --config ${{env.BUILD_TYPE}}

