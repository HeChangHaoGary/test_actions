name: CMake_rock86

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  clear:
    name: Clear cache
    runs-on: ubuntu-latest
    steps:
    - uses: MyAlbum/purge-cache@v2
      with:
        max-age: 104800 # Cache max 7 days since last use (this is the default)
      
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    # get docker contatiner
    container: 
      image: dingodatabase/dingo-store-rocky-8.6-dev:latest

    steps:
    # - uses: actions/checkout@v3


    # - name: Set Safe Dir
    #   run: git config --global --add safe.directory $PWD 

    - name: Clone Submodule
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cd /home && git clone https://github.com/dingodb/dingo-store.git && cd dingo-store && git submodule update --init --recursive

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run:  cd /home/dingo-store &&  cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DTHIRD_PARTY_BUILD_TYPE=${{env.BUILD_TYPE}} -DDINGO_BUILD_STATIC=ON -DBUILD_UNIT_TESTS=OFF
 

    - name: Build
      # Build your program with the given configuration
      run: cd /home/dingo-store && cmake --build ./build --config ${{env.BUILD_TYPE}}


    - name: Archive the dingo directory
      run: |
        cd /home/dingo-store && tar -czvf dingo-store.tar.gz  scripts build/bin/dingodb* conf/ 

    - name: copy artifactory to another workflow
      uses: actions/upload-artifact@v2
      with:
          name: dingo-store.tar.gz
          path: /home/dingo-store/dingo-store.tar.gz

    
    
